<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="icosphere_8cpp" kind="file" language="C++">
    <compoundname>icosphere.cpp</compoundname>
    <includes refid="icosphere_8h" local="yes">icosphere.h</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_double3x3.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/type_mat3x3.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/type_vec3.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/qualifier.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/setup.hpp</includes>
    <includes local="no">cassert</includes>
    <includes local="no">cstddef</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/simd/platform.h</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/type_vec3.inl</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/compute_vector_relational.hpp</includes>
    <includes local="no">limits</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/type_mat3x3.inl</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/matrix.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/vec2.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/vector_bool2.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/type_vec2.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/type_vec2.inl</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/vector_bool2_precision.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/vector_float2.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/vector_float2_precision.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/vector_double2.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/vector_double2_precision.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/vector_int2.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/vector_int2_precision.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/vector_uint2.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/vector_uint2_precision.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/vec3.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/vector_bool3.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/vector_bool3_precision.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/vector_float3.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/vector_float3_precision.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/vector_double3.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/vector_double3_precision.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/vector_int3.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/vector_int3_precision.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/vector_uint3.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/vector_uint3_precision.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/vec4.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/vector_bool4.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/type_vec4.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/type_vec4.inl</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/vector_bool4_precision.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/vector_float4.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/vector_float4_precision.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/vector_double4.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/vector_double4_precision.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/vector_int4.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/vector_int4_precision.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/vector_uint4.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/vector_uint4_precision.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/mat2x2.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_double2x2.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/type_mat2x2.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/type_mat2x2.inl</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_double2x2_precision.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_float2x2.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_float2x2_precision.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/mat2x3.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_double2x3.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/type_mat2x3.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/type_mat2x3.inl</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_double2x3_precision.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_float2x3.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_float2x3_precision.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/mat2x4.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_double2x4.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/type_mat2x4.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/type_mat2x4.inl</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_double2x4_precision.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_float2x4.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_float2x4_precision.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/mat3x2.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_double3x2.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/type_mat3x2.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/type_mat3x2.inl</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_double3x2_precision.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_float3x2.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_float3x2_precision.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/mat3x3.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/mat3x4.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_double3x4.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/type_mat3x4.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/type_mat3x4.inl</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_double3x4_precision.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_float3x4.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_float3x4_precision.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/mat4x2.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_double4x2.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/type_mat4x2.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/type_mat4x2.inl</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_double4x2_precision.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_float4x2.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_float4x2_precision.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/mat4x3.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_double4x3.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/type_mat4x3.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/type_mat4x3.inl</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_double4x3_precision.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_float4x3.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_float4x3_precision.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/mat4x4.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_double4x4.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/type_mat4x4.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/type_mat4x4.inl</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_double4x4_precision.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_float4x4.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_float4x4_precision.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/func_matrix.inl</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/geometric.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/func_geometric.inl</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/exponential.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/type_vec1.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/type_vec1.inl</includes>
    <includes local="no">cmath</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/func_exponential.inl</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/vector_relational.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/func_vector_relational.inl</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/_vectorize.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/common.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/_fixes.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/func_common.inl</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/compute_common.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_double3x3_precision.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_float3x3.hpp</includes>
    <includes local="yes">/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_float3x3_precision.hpp</includes>
    <includes refid="renderdata_8h" local="yes">renderdata.h</includes>
    <incdepgraph>
      <node id="3">
        <label>list</label>
      </node>
      <node id="8">
        <label>../external-libraries/glm-master/glm/mat3x3.hpp</label>
      </node>
      <node id="99">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_double3x4_precision.hpp</label>
      </node>
      <node id="44">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/vector_bool3_precision.hpp</label>
      </node>
      <node id="109">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/mat4x3.hpp</label>
      </node>
      <node id="69">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/type_mat2x2.inl</label>
      </node>
      <node id="48">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/vector_double3_precision.hpp</label>
      </node>
      <node id="65">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/vector_uint4_precision.hpp</label>
      </node>
      <node id="103">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_double4x2.hpp</label>
      </node>
      <node id="9">
        <label>../external-libraries/glm-master/glm/matrix.hpp</label>
      </node>
      <node id="135">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/_fixes.hpp</label>
      </node>
      <node id="39">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/vector_int2_precision.hpp</label>
      </node>
      <node id="119">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/type_mat4x4.inl</label>
      </node>
      <node id="26">
        <label>limits</label>
      </node>
      <node id="7">
        <label>QVector3D</label>
      </node>
      <node id="116">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/mat4x4.hpp</label>
      </node>
      <node id="76">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/type_mat2x3.inl</label>
      </node>
      <node id="127">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/type_vec1.hpp</label>
      </node>
      <node id="56">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/type_vec4.inl</label>
      </node>
      <node id="110">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_double4x3.hpp</label>
      </node>
      <node id="131">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/vector_relational.hpp</label>
      </node>
      <node id="85">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_float2x4.hpp</label>
      </node>
      <node id="134">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/common.hpp</label>
      </node>
      <node id="23">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/simd/platform.h</label>
      </node>
      <node id="136">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/func_common.inl</label>
      </node>
      <node id="105">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/type_mat4x2.inl</label>
      </node>
      <node id="51">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/vector_uint3.hpp</label>
      </node>
      <node id="32">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/type_vec2.inl</label>
      </node>
      <node id="123">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/func_matrix.inl</label>
      </node>
      <node id="112">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/type_mat4x3.inl</label>
      </node>
      <node id="71">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_float2x2.hpp</label>
      </node>
      <node id="40">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/vector_uint2.hpp</label>
      </node>
      <node id="126">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/exponential.hpp</label>
      </node>
      <node id="46">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/vector_float3_precision.hpp</label>
      </node>
      <node id="38">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/vector_int2.hpp</label>
      </node>
      <node id="33">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/vector_bool2_precision.hpp</label>
      </node>
      <node id="24">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/type_vec3.inl</label>
      </node>
      <node id="129">
        <label>cmath</label>
      </node>
      <node id="21">
        <label>cassert</label>
      </node>
      <node id="60">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/vector_double4.hpp</label>
      </node>
      <node id="121">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_float4x4.hpp</label>
      </node>
      <node id="78">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_float2x3.hpp</label>
      </node>
      <node id="49">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/vector_int3.hpp</label>
      </node>
      <node id="43">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/vector_bool3.hpp</label>
      </node>
      <node id="47">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/vector_double3.hpp</label>
      </node>
      <node id="137">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/compute_common.hpp</label>
      </node>
      <node id="37">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/vector_double2_precision.hpp</label>
      </node>
      <node id="11">
        <label>spheredepthdata.h</label>
        <link refid="spheredepthdata_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/vector_uint3_precision.hpp</label>
      </node>
      <node id="72">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_float2x2_precision.hpp</label>
      </node>
      <node id="4">
        <label>map</label>
      </node>
      <node id="64">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/vector_uint4.hpp</label>
      </node>
      <node id="50">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/vector_int3_precision.hpp</label>
      </node>
      <node id="97">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/type_mat3x4.hpp</label>
      </node>
      <node id="62">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/vector_int4.hpp</label>
      </node>
      <node id="132">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/func_vector_relational.inl</label>
      </node>
      <node id="128">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/type_vec1.inl</label>
      </node>
      <node id="30">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/vector_bool2.hpp</label>
      </node>
      <node id="36">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/vector_double2.hpp</label>
      </node>
      <node id="70">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_double2x2_precision.hpp</label>
      </node>
      <node id="107">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_float4x2.hpp</label>
      </node>
      <node id="28">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/matrix.hpp</label>
      </node>
      <node id="114">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_float4x3.hpp</label>
      </node>
      <node id="108">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_float4x2_precision.hpp</label>
      </node>
      <node id="87">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/mat3x2.hpp</label>
      </node>
      <node id="89">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/type_mat3x2.hpp</label>
      </node>
      <node id="54">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/vector_bool4.hpp</label>
      </node>
      <node id="106">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_double4x2_precision.hpp</label>
      </node>
      <node id="93">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_float3x2_precision.hpp</label>
      </node>
      <node id="94">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/mat3x3.hpp</label>
      </node>
      <node id="17">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/type_mat3x3.hpp</label>
      </node>
      <node id="1">
        <label>icosphere.h</label>
        <link refid="icosphere_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="91">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_double3x2_precision.hpp</label>
      </node>
      <node id="35">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/vector_float2_precision.hpp</label>
      </node>
      <node id="95">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/mat3x4.hpp</label>
      </node>
      <node id="41">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/vector_uint2_precision.hpp</label>
      </node>
      <node id="79">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_float2x3_precision.hpp</label>
      </node>
      <node id="96">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_double3x4.hpp</label>
      </node>
      <node id="63">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/vector_int4_precision.hpp</label>
      </node>
      <node id="19">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/qualifier.hpp</label>
      </node>
      <node id="2">
        <label>vector</label>
      </node>
      <node id="115">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_float4x3_precision.hpp</label>
      </node>
      <node id="77">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_double2x3_precision.hpp</label>
      </node>
      <node id="82">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/type_mat2x4.hpp</label>
      </node>
      <node id="88">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_double3x2.hpp</label>
      </node>
      <node id="98">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/type_mat3x4.inl</label>
      </node>
      <node id="140">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_float3x3_precision.hpp</label>
      </node>
      <node id="13">
        <label>resources/colormaps_matplotlib.h</label>
        <link refid="colormaps__matplotlib_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="142">
        <label>QString</label>
      </node>
      <node id="6">
        <label>QOpenGLFunctions</label>
      </node>
      <node id="16">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_double3x3.hpp</label>
      </node>
      <node id="20">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/setup.hpp</label>
      </node>
      <node id="133">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/_vectorize.hpp</label>
      </node>
      <node id="125">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/func_geometric.inl</label>
      </node>
      <node id="130">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/func_exponential.inl</label>
      </node>
      <node id="113">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_double4x3_precision.hpp</label>
      </node>
      <node id="68">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/type_mat2x2.hpp</label>
      </node>
      <node id="5">
        <label>math.h</label>
      </node>
      <node id="90">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/type_mat3x2.inl</label>
      </node>
      <node id="53">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/vec4.hpp</label>
      </node>
      <node id="118">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/type_mat4x4.hpp</label>
      </node>
      <node id="15">
        <label>iostream</label>
      </node>
      <node id="138">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_double3x3_precision.hpp</label>
      </node>
      <node id="75">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/type_mat2x3.hpp</label>
      </node>
      <node id="25">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/compute_vector_relational.hpp</label>
      </node>
      <node id="45">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/vector_float3.hpp</label>
      </node>
      <node id="86">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_float2x4_precision.hpp</label>
      </node>
      <node id="10">
        <label>../external-libraries/glm-master/glm/vec3.hpp</label>
      </node>
      <node id="57">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/vector_bool4_precision.hpp</label>
      </node>
      <node id="22">
        <label>cstddef</label>
      </node>
      <node id="27">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/type_mat3x3.inl</label>
      </node>
      <node id="42">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/vec3.hpp</label>
      </node>
      <node id="14">
        <label>unordered_map</label>
      </node>
      <node id="61">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/vector_double4_precision.hpp</label>
      </node>
      <node id="34">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/vector_float2.hpp</label>
      </node>
      <node id="100">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_float3x4.hpp</label>
      </node>
      <node id="81">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_double2x4.hpp</label>
      </node>
      <node id="29">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/vec2.hpp</label>
      </node>
      <node id="55">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/type_vec4.hpp</label>
      </node>
      <node id="66">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/mat2x2.hpp</label>
      </node>
      <node id="104">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/type_mat4x2.hpp</label>
      </node>
      <node id="124">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/geometric.hpp</label>
      </node>
      <node id="122">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_float4x4_precision.hpp</label>
      </node>
      <node id="84">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_double2x4_precision.hpp</label>
      </node>
      <node id="73">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/mat2x3.hpp</label>
      </node>
      <node id="111">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/type_mat4x3.hpp</label>
      </node>
      <node id="58">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/vector_float4.hpp</label>
      </node>
      <node id="101">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_float3x4_precision.hpp</label>
      </node>
      <node id="92">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_float3x2.hpp</label>
      </node>
      <node id="67">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_double2x2.hpp</label>
      </node>
      <node id="12">
        <label>algorithm</label>
      </node>
      <node id="83">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/type_mat2x4.inl</label>
      </node>
      <node id="143">
        <label>cnpy.h</label>
      </node>
      <node id="31">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/type_vec2.hpp</label>
      </node>
      <node id="80">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/mat2x4.hpp</label>
      </node>
      <node id="117">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_double4x4.hpp</label>
      </node>
      <node id="120">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_double4x4_precision.hpp</label>
      </node>
      <node id="139">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_float3x3.hpp</label>
      </node>
      <node id="74">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/matrix_double2x3.hpp</label>
      </node>
      <node id="59">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/ext/vector_float4_precision.hpp</label>
      </node>
      <node id="102">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/mat4x2.hpp</label>
      </node>
      <node id="18">
        <label>/home/annika/WORK/sphere-histo/external-libraries/glm-master/glm/detail/type_vec3.hpp</label>
      </node>
      <node id="141">
        <label>renderdata.h</label>
        <link refid="renderdata_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="142" relation="include">
        </childnode>
        <childnode refid="143" relation="include">
        </childnode>
        <childnode refid="1" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="0">
        <label>icosphere.cpp</label>
        <link refid="icosphere_8cpp"/>
        <childnode refid="1" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="103" relation="include">
        </childnode>
        <childnode refid="104" relation="include">
        </childnode>
        <childnode refid="105" relation="include">
        </childnode>
        <childnode refid="106" relation="include">
        </childnode>
        <childnode refid="107" relation="include">
        </childnode>
        <childnode refid="108" relation="include">
        </childnode>
        <childnode refid="109" relation="include">
        </childnode>
        <childnode refid="110" relation="include">
        </childnode>
        <childnode refid="111" relation="include">
        </childnode>
        <childnode refid="112" relation="include">
        </childnode>
        <childnode refid="113" relation="include">
        </childnode>
        <childnode refid="114" relation="include">
        </childnode>
        <childnode refid="115" relation="include">
        </childnode>
        <childnode refid="116" relation="include">
        </childnode>
        <childnode refid="117" relation="include">
        </childnode>
        <childnode refid="118" relation="include">
        </childnode>
        <childnode refid="119" relation="include">
        </childnode>
        <childnode refid="120" relation="include">
        </childnode>
        <childnode refid="121" relation="include">
        </childnode>
        <childnode refid="122" relation="include">
        </childnode>
        <childnode refid="123" relation="include">
        </childnode>
        <childnode refid="124" relation="include">
        </childnode>
        <childnode refid="125" relation="include">
        </childnode>
        <childnode refid="126" relation="include">
        </childnode>
        <childnode refid="127" relation="include">
        </childnode>
        <childnode refid="128" relation="include">
        </childnode>
        <childnode refid="129" relation="include">
        </childnode>
        <childnode refid="130" relation="include">
        </childnode>
        <childnode refid="131" relation="include">
        </childnode>
        <childnode refid="132" relation="include">
        </childnode>
        <childnode refid="133" relation="include">
        </childnode>
        <childnode refid="134" relation="include">
        </childnode>
        <childnode refid="135" relation="include">
        </childnode>
        <childnode refid="136" relation="include">
        </childnode>
        <childnode refid="137" relation="include">
        </childnode>
        <childnode refid="138" relation="include">
        </childnode>
        <childnode refid="139" relation="include">
        </childnode>
        <childnode refid="140" relation="include">
        </childnode>
        <childnode refid="141" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="icosphere_8h" kindref="compound">icosphere.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>avoid<sp/>circular<sp/>dependencies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="renderdata_8h" kindref="compound">renderdata.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"><ref refid="class_icosphere_1a5fdbc49b812b3862df13c86f42b6eef5" kindref="member">Icosphere::Icosphere</ref>()</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*:colorMap(std::begin(cm::_viridis_data),<sp/>std::end(cm::_viridis_data))*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>X<sp/><sp/>=.525731112119133606;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Z<sp/><sp/>=.850650808352039932;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>vertices<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{-X,<sp/>0.0,<sp/>Z},<sp/>{X,<sp/>0.0,<sp/>Z},<sp/>{-X,<sp/>0.0,<sp/>-Z},<sp/>{X,<sp/>0.0,<sp/>-Z},</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{0.0,<sp/>Z,<sp/>X},<sp/>{0.0,<sp/>Z,<sp/>-X},<sp/>{0.0,<sp/>-Z,<sp/>X},<sp/>{0.0,<sp/>-Z,<sp/>-X},</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{Z,<sp/>X,<sp/>0.0},<sp/>{-Z,<sp/>X,<sp/>0.0},<sp/>{Z,<sp/>-X,<sp/>0.0},<sp/>{-Z,<sp/>-X,<sp/>0.0}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>indices<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{0,4,1},<sp/>{0,9,4},<sp/>{9,5,4},<sp/>{4,5,8},<sp/>{4,8,1},</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{8,10,1},<sp/>{8,3,10},<sp/>{5,3,8},<sp/>{5,2,3},<sp/>{2,7,3},</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{7,10,3},<sp/>{7,6,10},<sp/>{7,11,6},<sp/>{11,0,6},<sp/>{0,1,6},</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{6,1,10},<sp/>{9,0,11},<sp/>{9,11,2},<sp/>{9,2,5},<sp/>{7,2,11}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>colorLookupMap<sp/>=<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{0,<sp/>glm::vec3(0.27058823529411763,<sp/>0.4588235294117647,<sp/>0.7058823529411765)},</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{1,<sp/>glm::vec3(0.4549019607843137,<sp/>0.6784313725490196,<sp/>0.8196078431372549)},</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{10,<sp/>glm::vec3(0.6705882352941176,<sp/>0.8509803921568627,<sp/>0.9137254901960784)},</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{100,<sp/>glm::vec3(0.8784313725490196,<sp/>0.9529411764705882,<sp/>0.9725490196078431)},</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{500,<sp/>glm::vec3(1.0,<sp/>1.0,<sp/>0.7490196078431373)},</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{1000,<sp/>glm::vec3(0.996078431372549,<sp/>0.8784313725490196,<sp/>0.5647058823529412)},</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{5000,<sp/>glm::vec3(0.9921568627450981,<sp/>0.6823529411764706,<sp/>0.3803921568627451)},</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{10000,<sp/>glm::vec3(0.9568627450980393,<sp/>0.42745098039215684,<sp/>0.2627450980392157)},</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{50000,<sp/>glm::vec3(0.8431372549019608,<sp/>0.18823529411764706,<sp/>0.15294117647058825)},</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{100000,<sp/>glm::vec3(0,0,0)},</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>totalPoints<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal">}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//void<sp/>Icosphere::drawIcosphere(unsigned<sp/>int<sp/>numberOfSubdivisions,<sp/>std::list&lt;QVector3D<sp/>&gt;<sp/>pointsForHistogram){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>totalPoints<sp/>=<sp/>pointsForHistogram.size();<sp/><sp/><sp/><sp/>//<sp/>Muss<sp/>gegen<sp/>Max-Points<sp/>ausgetauscht<sp/>werden</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>for<sp/>(std::vector&lt;int&gt;<sp/>&amp;i<sp/>:<sp/>indices){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float<sp/>v1[3]<sp/>=<sp/>{vertices[i[0]][0],<sp/>vertices[i[0]][1],<sp/>vertices[i[0]][2]};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float<sp/>v2[3]<sp/>=<sp/>{vertices[i[1]][0],<sp/>vertices[i[1]][1],<sp/>vertices[i[1]][2]};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float<sp/>v3[3]<sp/>=<sp/>{vertices[i[2]][0],<sp/>vertices[i[2]][1],<sp/>vertices[i[2]][2]};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glm::mat3<sp/>transformationMatrix<sp/>=<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v1[0],<sp/>v1[1],<sp/>v1[2],<sp/><sp/><sp/><sp/><sp/>//<sp/>first<sp/>COLUMN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v2[0],<sp/>v2[1],<sp/>v2[2],<sp/><sp/><sp/><sp/><sp/>//<sp/>second<sp/>COLUMN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v3[0],<sp/>v3[1],<sp/>v3[2]<sp/><sp/><sp/><sp/><sp/>//<sp/>third<sp/>COLUMN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>transformationMatrix<sp/>=<sp/>glm::inverse(transformationMatrix);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>transformation<sp/>matrix<sp/>inversed<sp/>in<sp/>order<sp/>to<sp/>change<sp/>basis<sp/>to<sp/>triangle<sp/>vertices&apos;<sp/>coordinates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::list&lt;QVector3D&gt;<sp/>pointsForTriangle;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(auto<sp/>i<sp/>=<sp/>pointsForHistogram.begin();<sp/>i<sp/>!=<sp/>pointsForHistogram.end();<sp/>){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glm::vec3<sp/>point<sp/>=<sp/>{i-&gt;x(),<sp/>i-&gt;y(),<sp/>i-&gt;z()};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(pointInFirstQuadrantAfterTransformation(point<sp/>,<sp/>transformationMatrix)){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//std::cout<sp/>&lt;&lt;<sp/>&quot;(&quot;<sp/>&lt;&lt;<sp/>i-&gt;at(0)<sp/>&lt;&lt;<sp/>&quot;,<sp/>&quot;<sp/>&lt;&lt;<sp/>i-&gt;at(1)<sp/>&lt;&lt;<sp/>&quot;,<sp/>&quot;<sp/>&lt;&lt;<sp/>i-&gt;at(2)<sp/>&lt;&lt;<sp/>&quot;)&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointsForTriangle.push_back(*i);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>pointsForHistogram.erase(i);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}else{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subdivide(v1,<sp/>v2,<sp/>v3,<sp/>numberOfSubdivisions,<sp/>pointsForTriangle);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><ref refid="class_sphere_depth_data" kindref="compound">SphereDepthData</ref><sp/><ref refid="class_icosphere_1a504e5ebc64937cda33a2dd4a755c0ace" kindref="member">Icosphere::getIcosahedron</ref>(){</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;float&gt;<sp/>verticesForCurrentDepth;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Icosahedron<sp/>consists<sp/>of<sp/>20<sp/>triangles<sp/>in<sp/>3D<sp/>space,<sp/>final<sp/>size:<sp/>20<sp/>*<sp/>3<sp/>*<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::list&lt;QVector3D&gt;<sp/>&gt;<sp/>pointsPerTriangle;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Points<sp/>per<sp/>each<sp/>triangle,<sp/>final<sp/>size:<sp/>20</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>std::list&lt;QVector3D&gt;<sp/>tmp_points;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Temporary<sp/>point<sp/>list<sp/>for<sp/>current<sp/>triangle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>all<sp/>points<sp/>from<sp/>currently<sp/>opened<sp/>.npy<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>std::list&lt;QVector3D&gt;<sp/>pointList<sp/>=<sp/><ref refid="class_render_data_1a1fffc72f3dd17ab052d4fb2f025ef5a0" kindref="member">RenderData::getInstance</ref>()-&gt;<ref refid="class_render_data_1ac3ddb0af8cf9a0f2fb4d69815cf76b9d" kindref="member">getPoints</ref>();</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>over<sp/>20<sp/>triangles<sp/>of<sp/>icosahedron</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::vector&lt;int&gt;<sp/>&amp;i<sp/>:<sp/>indices){</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>3<sp/>triangle<sp/>vertices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>v1[3]<sp/>=<sp/>{vertices[i[0]][0],<sp/>vertices[i[0]][1],<sp/>vertices[i[0]][2]};</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>v2[3]<sp/>=<sp/>{vertices[i[1]][0],<sp/>vertices[i[1]][1],<sp/>vertices[i[1]][2]};</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>v3[3]<sp/>=<sp/>{vertices[i[2]][0],<sp/>vertices[i[2]][1],<sp/>vertices[i[2]][2]};</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Turn<sp/>triangle<sp/>vertices<sp/>to<sp/>transformation<sp/>matrix<sp/>for<sp/>point<sp/>coverage<sp/>evaluation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glm::mat3<sp/>transformationMatrix<sp/>=<sp/>getTransformationMatrix(v1,<sp/>v2,<sp/>v3);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Filter<sp/>out<sp/>points<sp/>of<sp/>current<sp/>triangle<sp/>from<sp/>all<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>pointList.begin();<sp/>i<sp/>!=<sp/>pointList.end();<sp/>++i){</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glm::vec3<sp/>point<sp/>=<sp/>{i-&gt;x(),<sp/>i-&gt;y(),<sp/>i-&gt;z()};</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pointInFirstQuadrantAfterTransformation(point<sp/>,<sp/>transformationMatrix)){</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_points.push_back(*i);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>pointList.erase(i);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Save<sp/>data<sp/>for<sp/>current<sp/>triangle<sp/>and<sp/>clear<sp/>temporary<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>verticesForCurrentDepth.insert(verticesForCurrentDepth.end(),<sp/>std::begin(v1),<sp/>std::end(v1));</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>verticesForCurrentDepth.insert(verticesForCurrentDepth.end(),<sp/>std::begin(v2),<sp/>std::end(v2));</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>verticesForCurrentDepth.insert(verticesForCurrentDepth.end(),<sp/>std::begin(v3),<sp/>std::end(v3));</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointsPerTriangle.push_back(tmp_points);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_points.clear();</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Save<sp/>data<sp/>for<sp/>current<sp/>depth<sp/>into<sp/>respective<sp/>SphereDepthData<sp/>of<sp/>the<sp/>return<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_sphere_depth_data" kindref="compound">SphereDepthData</ref>(0,<sp/>verticesForCurrentDepth,<sp/>pointsPerTriangle);</highlight></codeline>
<codeline lineno="117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal">std::vector&lt;SphereDepthData&gt;<sp/><ref refid="class_icosphere_1a0ab61f28cd6d528af88ce6174325a9c7" kindref="member">Icosphere::calculateDepthData</ref>(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>maxCalculatedDepth,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>sphereDepth)</highlight></codeline>
<codeline lineno="120"><highlight class="normal">{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;SphereDepthData&gt;<sp/>verticesPerDepth;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>first<sp/>calculate<sp/>subdivision<sp/>depth<sp/>0:<sp/>Calculate<sp/>undivided<sp/>icosahedron<sp/>triangles<sp/>based<sp/>on<sp/>predefined<sp/>vertices<sp/>and<sp/>indices<sp/>and<sp/>calculate<sp/>respective<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>if(maxCalculatedDepth<sp/>==<sp/>-1){<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>TODO:<sp/>Extract<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;float&gt;<sp/>verticesForCurrentDepth;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Icosahedron<sp/>consists<sp/>of<sp/>20<sp/>triangles<sp/>in<sp/>3D<sp/>space,<sp/>final<sp/>size:<sp/>20<sp/>*<sp/>3<sp/>*<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::list&lt;QVector3D&gt;<sp/>&gt;<sp/>pointsPerTriangle;<sp/><sp/><sp/>//<sp/>Points<sp/>per<sp/>each<sp/>triangle,<sp/>final<sp/>size:<sp/>20</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::list&lt;QVector3D&gt;<sp/>tmp_points;<sp/><sp/><sp/><sp/>//<sp/>Temporary<sp/>point<sp/>list<sp/>for<sp/>current<sp/>triangle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Get<sp/>all<sp/>points<sp/>from<sp/>currently<sp/>opened<sp/>.npy<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::list&lt;QVector3D&gt;<sp/>pointList<sp/>=<sp/>RenderData::getInstance()-&gt;getPoints();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Loop<sp/>over<sp/>20<sp/>triangles<sp/>of<sp/>icosahedron</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(std::vector&lt;int&gt;<sp/>&amp;i<sp/>:<sp/>indices){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Get<sp/>the<sp/>3<sp/>triangle<sp/>vertices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float<sp/>v1[3]<sp/>=<sp/>{vertices[i[0]][0],<sp/>vertices[i[0]][1],<sp/>vertices[i[0]][2]};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float<sp/>v2[3]<sp/>=<sp/>{vertices[i[1]][0],<sp/>vertices[i[1]][1],<sp/>vertices[i[1]][2]};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float<sp/>v3[3]<sp/>=<sp/>{vertices[i[2]][0],<sp/>vertices[i[2]][1],<sp/>vertices[i[2]][2]};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Turn<sp/>triangle<sp/>vertices<sp/>to<sp/>transformation<sp/>matrix<sp/>for<sp/>point<sp/>coverage<sp/>evaluation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glm::mat3<sp/>transformationMatrix<sp/>=<sp/>getTransformationMatrix(v1,<sp/>v2,<sp/>v3);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Filter<sp/>out<sp/>points<sp/>of<sp/>current<sp/>triangle<sp/>from<sp/>all<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(auto<sp/>i<sp/>=<sp/>pointList.begin();<sp/>i<sp/>!=<sp/>pointList.end();<sp/>++i){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glm::vec3<sp/>point<sp/>=<sp/>{i-&gt;x(),<sp/>i-&gt;y(),<sp/>i-&gt;z()};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(pointInFirstQuadrantAfterTransformation(point<sp/>,<sp/>transformationMatrix)){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_points.push_back(*i);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>pointList.erase(i);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}else{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Save<sp/>data<sp/>for<sp/>current<sp/>triangle<sp/>and<sp/>clear<sp/>temporary<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>verticesForCurrentDepth.insert(verticesForCurrentDepth.end(),<sp/>std::begin(v1),<sp/>std::end(v1));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>verticesForCurrentDepth.insert(verticesForCurrentDepth.end(),<sp/>std::begin(v2),<sp/>std::end(v2));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>verticesForCurrentDepth.insert(verticesForCurrentDepth.end(),<sp/>std::begin(v3),<sp/>std::end(v3));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointsPerTriangle.push_back(tmp_points);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_points.clear();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Save<sp/>data<sp/>for<sp/>current<sp/>depth<sp/>into<sp/>respective<sp/>SphereDepthData<sp/>of<sp/>the<sp/>return<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>verticesPerDepth[0]<sp/>=<sp/>SphereDepthData(0,<sp/>verticesForCurrentDepth,<sp/>pointsPerTriangle);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>TODO:<sp/>Alles<sp/>fuer<sp/>depth=0<sp/>hierzu<sp/>auslagern:<sp/>SphereDepthData<sp/>calculateIcosahedron();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_sphere_depth_data" kindref="compound">SphereDepthData</ref><sp/>lastSphere<sp/>=<sp/><ref refid="class_render_data_1a1fffc72f3dd17ab052d4fb2f025ef5a0" kindref="member">RenderData::getInstance</ref>()-&gt;<ref refid="class_render_data_1a5974d513e5c5c05a805c0c30f83fd9b1" kindref="member">getSphereDepthData</ref>(maxCalculatedDepth);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_sphere_depth_data" kindref="compound">SphereDepthData</ref><sp/>currentSphere;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/><ref refid="class_render_data_1a1fffc72f3dd17ab052d4fb2f025ef5a0" kindref="member">RenderData::getInstance</ref>()-&gt;getMaxCalculatedDepth()<sp/>+<sp/>1;<sp/>i<sp/>&lt;=<sp/>sphereDepth;<sp/>++i){</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentSphere<sp/>=<sp/>calculateSubdivision(lastSphere);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>verticesPerDepth.push_back(currentSphere);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastSphere<sp/>=<sp/>currentSphere;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>verticesPerDepth;</highlight></codeline>
<codeline lineno="182"><highlight class="normal">}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><ref refid="class_sphere_depth_data" kindref="compound">SphereDepthData</ref><sp/>Icosphere::calculateSubdivision(<ref refid="class_sphere_depth_data" kindref="compound">SphereDepthData</ref><sp/>lastSphere){</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;float&gt;<sp/>lastDepthsVertices<sp/>=<sp/>lastSphere.<ref refid="class_sphere_depth_data_1adab658de163c515ec9a41a70300a0af9" kindref="member">getVertices</ref>();</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::list&lt;QVector3D&gt;<sp/>&gt;<sp/>lastDepthsPointsPerTriangle<sp/>=<sp/>lastSphere.<ref refid="class_sphere_depth_data_1af42bd1ede7948a735367755a61148adc" kindref="member">getPointsPerTriangle</ref>();</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;float&gt;<sp/>verticesForCurrentDepth(20<sp/>*<sp/>pow(4,<sp/>lastSphere.<ref refid="class_sphere_depth_data_1ae528344982e3b7483e77ec9cdf21ec09" kindref="member">getDepth</ref>()+1)<sp/>*<sp/>3<sp/>*<sp/>3);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Each<sp/>subdivision<sp/>has<sp/>4<sp/>times<sp/>more<sp/>triangles<sp/>than<sp/>its<sp/>predecessor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::list&lt;QVector3D&gt;<sp/>&gt;<sp/>pointsPerTriangle(20<sp/>*<sp/>pow(4,<sp/>lastSphere.<ref refid="class_sphere_depth_data_1ae528344982e3b7483e77ec9cdf21ec09" kindref="member">getDepth</ref>()+1));<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Points<sp/>per<sp/>each<sp/>triangle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>iterate<sp/>over<sp/>all<sp/>triangles<sp/>of<sp/>the<sp/>last<sp/>sphere</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>lastDepthsPointsPerTriangle.size();<sp/>++i){</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Current<sp/>triangle<sp/>vertices:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>v1[3]<sp/>=<sp/>{lastDepthsVertices[i*3*3],<sp/>lastDepthsVertices[(i*3*3)<sp/>+1],<sp/>lastDepthsVertices[(i*3*3)<sp/>+2]};</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>v2[3]<sp/>=<sp/>{lastDepthsVertices[(i*3*3)<sp/>+<sp/>3],<sp/>lastDepthsVertices[(i*3*3)<sp/>+<sp/>4],<sp/>lastDepthsVertices[(i*3*3)<sp/>+<sp/>5]};</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>v3[3]<sp/>=<sp/>{lastDepthsVertices[(i*3*3)<sp/>+<sp/>6],<sp/>lastDepthsVertices[(i*3*3)<sp/>+<sp/>7],<sp/>lastDepthsVertices[(i*3*3)<sp/>+<sp/>8]};</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::list&lt;QVector3D&gt;<sp/>pointList<sp/>=<sp/>lastDepthsPointsPerTriangle.at(i);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::list&lt;QVector3D&gt;<sp/>tmp_points;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Temporary<sp/>point<sp/>list<sp/>for<sp/>current<sp/>triangle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Generate<sp/>intermediate<sp/>vertices:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GLfloat<sp/>v12[3],<sp/>v23[3],<sp/>v31[3];</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>3;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v12[i]<sp/>=<sp/>v1[i]+v2[i];</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v23[i]<sp/>=<sp/>v2[i]+v3[i];</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v31[i]<sp/>=<sp/>v3[i]+v1[i];</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normalize(v12);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normalize(v23);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normalize(v31);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Triangle<sp/>1<sp/>(v1,<sp/>v12,<sp/>v31)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Filter<sp/>points<sp/>inside<sp/>triangle<sp/>into<sp/>tmp_points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glm::mat3<sp/>transformationMatrix<sp/>=<sp/>getTransformationMatrix(v1,<sp/>v12,<sp/>v31);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>pointList.begin();<sp/>i<sp/>!=<sp/>pointList.end();<sp/>++i){</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glm::vec3<sp/>point<sp/>=<sp/>{i-&gt;x(),<sp/>i-&gt;y(),<sp/>i-&gt;z()};</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pointInFirstQuadrantAfterTransformation(point<sp/>,<sp/>transformationMatrix)){</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_points.push_back(*i);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>pointList.erase(i);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Save<sp/>data<sp/>and<sp/>clear<sp/>tmp_points:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>verticesForCurrentDepth.insert(verticesForCurrentDepth.end(),<sp/>std::begin(v1),<sp/>std::end(v1));</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>verticesForCurrentDepth.insert(verticesForCurrentDepth.end(),<sp/>std::begin(v12),<sp/>std::end(v12));</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>verticesForCurrentDepth.insert(verticesForCurrentDepth.end(),<sp/>std::begin(v31),<sp/>std::end(v31));</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointsPerTriangle.push_back(tmp_points);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_points.clear();</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Triangle<sp/>2<sp/>(v2,<sp/>v23,<sp/>v12)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Filter<sp/>points<sp/>inside<sp/>triangle<sp/>into<sp/>tmp_points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>transformationMatrix<sp/>=<sp/>getTransformationMatrix(v2,<sp/>v23,<sp/>v12);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>pointList.begin();<sp/>i<sp/>!=<sp/>pointList.end();<sp/>++i){</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glm::vec3<sp/>point<sp/>=<sp/>{i-&gt;x(),<sp/>i-&gt;y(),<sp/>i-&gt;z()};</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pointInFirstQuadrantAfterTransformation(point<sp/>,<sp/>transformationMatrix)){</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_points.push_back(*i);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>pointList.erase(i);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Save<sp/>data<sp/>and<sp/>clear<sp/>tmp_points:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>verticesForCurrentDepth.insert(verticesForCurrentDepth.end(),<sp/>std::begin(v2),<sp/>std::end(v2));</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>verticesForCurrentDepth.insert(verticesForCurrentDepth.end(),<sp/>std::begin(v23),<sp/>std::end(v23));</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>verticesForCurrentDepth.insert(verticesForCurrentDepth.end(),<sp/>std::begin(v12),<sp/>std::end(v12));</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointsPerTriangle.push_back(tmp_points);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_points.clear();</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Triangle<sp/>3<sp/>(v3,<sp/>v31,<sp/>v23)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Filter<sp/>points<sp/>inside<sp/>triangle<sp/>into<sp/>tmp_points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>transformationMatrix<sp/>=<sp/>getTransformationMatrix(v3,<sp/>v31,<sp/>v23);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>pointList.begin();<sp/>i<sp/>!=<sp/>pointList.end();<sp/>++i){</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glm::vec3<sp/>point<sp/>=<sp/>{i-&gt;x(),<sp/>i-&gt;y(),<sp/>i-&gt;z()};</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pointInFirstQuadrantAfterTransformation(point<sp/>,<sp/>transformationMatrix)){</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_points.push_back(*i);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>pointList.erase(i);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Save<sp/>data<sp/>and<sp/>clear<sp/>tmp_points:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>verticesForCurrentDepth.insert(verticesForCurrentDepth.end(),<sp/>std::begin(v3),<sp/>std::end(v3));</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>verticesForCurrentDepth.insert(verticesForCurrentDepth.end(),<sp/>std::begin(v31),<sp/>std::end(v31));</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>verticesForCurrentDepth.insert(verticesForCurrentDepth.end(),<sp/>std::begin(v23),<sp/>std::end(v23));</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointsPerTriangle.push_back(tmp_points);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_points.clear();</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Triangle<sp/>4<sp/>(v12,<sp/>v23,<sp/>v31)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Filter<sp/>points<sp/>inside<sp/>triangle<sp/>into<sp/>tmp_points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>transformationMatrix<sp/>=<sp/>getTransformationMatrix(v12,<sp/>v23,<sp/>v31);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>pointList.begin();<sp/>i<sp/>!=<sp/>pointList.end();<sp/>++i){</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glm::vec3<sp/>point<sp/>=<sp/>{i-&gt;x(),<sp/>i-&gt;y(),<sp/>i-&gt;z()};</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pointInFirstQuadrantAfterTransformation(point<sp/>,<sp/>transformationMatrix)){</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_points.push_back(*i);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>pointList.erase(i);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Save<sp/>data<sp/>and<sp/>clear<sp/>tmp_points:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>verticesForCurrentDepth.insert(verticesForCurrentDepth.end(),<sp/>std::begin(v12),<sp/>std::end(v12));</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>verticesForCurrentDepth.insert(verticesForCurrentDepth.end(),<sp/>std::begin(v23),<sp/>std::end(v23));</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>verticesForCurrentDepth.insert(verticesForCurrentDepth.end(),<sp/>std::begin(v31),<sp/>std::end(v31));</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointsPerTriangle.push_back(tmp_points);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_points.clear();</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_sphere_depth_data" kindref="compound">SphereDepthData</ref>(lastSphere.<ref refid="class_sphere_depth_data_1ae528344982e3b7483e77ec9cdf21ec09" kindref="member">getDepth</ref>()+1,<sp/>verticesForCurrentDepth,<sp/>pointsPerTriangle);</highlight></codeline>
<codeline lineno="299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="comment">//void<sp/>Icosphere::subdivide(float<sp/>*v1,<sp/>float<sp/>*v2,<sp/>float<sp/>*v3,<sp/>long<sp/>depth,<sp/>std::list&lt;QVector3D&gt;<sp/>&amp;allRemainingPoints)</highlight></codeline>
<codeline lineno="303"><highlight class="comment"></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>if<sp/>(depth<sp/>==<sp/>0)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>triangleColor(allRemainingPoints.size());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>////triangleColor(allRemainingPoints.size());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>glPolygonMode(GL_FRONT_AND_BACK,<sp/>GL_FILL);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>drawTriangle(v1,<sp/>v2,<sp/>v3);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Draw<sp/>triangle<sp/>outlines:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>glPolygonMode(GL_FRONT_AND_BACK,<sp/>GL_LINE);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>glColor4f(0.8784313725490196,<sp/>0.9529411764705882,<sp/>0.9725490196078431,<sp/>0.2);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>float<sp/>v1l[3]<sp/>=<sp/>{v1[0]<sp/>*<sp/>1.001f,<sp/>v1[1]<sp/>*<sp/>1.001f,<sp/>v1[2]<sp/>*<sp/>1.001f};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>float<sp/>v2l[3]<sp/>=<sp/>{v2[0]<sp/>*<sp/>1.001f,<sp/>v2[1]<sp/>*<sp/>1.001f,<sp/>v2[2]<sp/>*<sp/>1.001f};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>float<sp/>v3l[3]<sp/>=<sp/>{v3[0]<sp/>*<sp/>1.001f,<sp/>v3[1]<sp/>*<sp/>1.001f,<sp/>v3[2]<sp/>*<sp/>1.001f};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>drawTriangle(v1l,<sp/>v2l,<sp/>v3l);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>return;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GLfloat<sp/>v12[3],<sp/>v23[3],<sp/>v31[3];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GLint<sp/>i;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>std::list&lt;QVector3D&gt;<sp/>pointsInTriangle;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>for<sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>3;<sp/>i++)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>v12[i]<sp/>=<sp/>v1[i]+v2[i];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>v23[i]<sp/>=<sp/>v2[i]+v3[i];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>v31[i]<sp/>=<sp/>v3[i]+v1[i];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>normalize(v12);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>normalize(v23);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>normalize(v31);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"></codeline>
<codeline lineno="340"><highlight class="comment">//<sp/><sp/><sp/>glm::dmat3<sp/>transformationMatrix<sp/>=<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>v1[0],<sp/>v1[1],<sp/>v1[2],<sp/><sp/><sp/><sp/><sp/>//<sp/>first<sp/>COLUMN!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>v12[0],<sp/>v12[1],<sp/>v12[2],<sp/><sp/><sp/><sp/><sp/>//<sp/>second<sp/>COLUMN!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>v31[0],<sp/>v31[1],<sp/>v31[2]<sp/><sp/><sp/><sp/><sp/>//<sp/>third<sp/>COLUMN!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>transformationMatrix<sp/>=<sp/>glm::inverse(transformationMatrix);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>transformation<sp/>matrix<sp/>inversed<sp/>in<sp/>order<sp/>to<sp/>change<sp/>basis<sp/>to<sp/>triangle<sp/>vertices&apos;<sp/>coordinates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>std::list&lt;QVector3D&gt;<sp/>pointsForTriangle;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>for(auto<sp/>i<sp/>=<sp/>allRemainingPoints.begin();<sp/>i<sp/>!=<sp/>allRemainingPoints.end();<sp/>){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>glm::vec3<sp/>point<sp/>=<sp/>{i-&gt;x(),<sp/>i-&gt;y(),<sp/>i-&gt;z()};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(pointInFirstQuadrantAfterTransformation(point<sp/>,<sp/>transformationMatrix)){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//std::cout<sp/>&lt;&lt;<sp/>&quot;(&quot;<sp/>&lt;&lt;<sp/>i-&gt;at(0)<sp/>&lt;&lt;<sp/>&quot;,<sp/>&quot;<sp/>&lt;&lt;<sp/>i-&gt;at(1)<sp/>&lt;&lt;<sp/>&quot;,<sp/>&quot;<sp/>&lt;&lt;<sp/>i-&gt;at(2)<sp/>&lt;&lt;<sp/>&quot;)&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointsForTriangle.push_back(*i);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>allRemainingPoints.erase(i);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}else{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>subdivide(v1,<sp/>v12,<sp/>v31,<sp/>depth-1,<sp/>pointsForTriangle);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="comment">//<sp/><sp/><sp/>transformationMatrix<sp/>=<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>v2[0],<sp/>v2[1],<sp/>v2[2],<sp/><sp/><sp/><sp/><sp/>//<sp/>first<sp/>COLUMN!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>v23[0],<sp/>v23[1],<sp/>v23[2],<sp/><sp/><sp/><sp/><sp/>//<sp/>second<sp/>COLUMN!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>v12[0],<sp/>v12[1],<sp/>v12[2]<sp/><sp/><sp/><sp/><sp/>//<sp/>third<sp/>COLUMN!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>transformationMatrix<sp/>=<sp/>glm::inverse(transformationMatrix);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>transformation<sp/>matrix<sp/>inversed<sp/>in<sp/>order<sp/>to<sp/>change<sp/>basis<sp/>to<sp/>triangle<sp/>vertices&apos;<sp/>coordinates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>pointsForTriangle.clear();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>for(auto<sp/>i<sp/>=<sp/>allRemainingPoints.begin();<sp/>i<sp/>!=<sp/>allRemainingPoints.end();<sp/>){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>glm::vec3<sp/>point<sp/>=<sp/>{i-&gt;x(),<sp/>i-&gt;y(),<sp/>i-&gt;z()};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(pointInFirstQuadrantAfterTransformation(point<sp/>,<sp/>transformationMatrix)){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//std::cout<sp/>&lt;&lt;<sp/>&quot;(&quot;<sp/>&lt;&lt;<sp/>i-&gt;at(0)<sp/>&lt;&lt;<sp/>&quot;,<sp/>&quot;<sp/>&lt;&lt;<sp/>i-&gt;at(1)<sp/>&lt;&lt;<sp/>&quot;,<sp/>&quot;<sp/>&lt;&lt;<sp/>i-&gt;at(2)<sp/>&lt;&lt;<sp/>&quot;)&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointsForTriangle.push_back(*i);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>allRemainingPoints.erase(i);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}else{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>subdivide(v2,<sp/>v23,<sp/>v12,<sp/>depth-1,<sp/>pointsForTriangle);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="comment">//<sp/><sp/>transformationMatrix<sp/>=<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>v3[0],<sp/>v3[1],<sp/>v3[2],<sp/><sp/><sp/><sp/><sp/>//<sp/>first<sp/>COLUMN!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>v31[0],<sp/>v31[1],<sp/>v31[2],<sp/><sp/><sp/><sp/><sp/>//<sp/>second<sp/>COLUMN!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>v23[0],<sp/>v23[1],<sp/>v23[2]<sp/><sp/><sp/><sp/><sp/>//<sp/>third<sp/>COLUMN!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>transformationMatrix<sp/>=<sp/>glm::inverse(transformationMatrix);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>transformation<sp/>matrix<sp/>inversed<sp/>in<sp/>order<sp/>to<sp/>change<sp/>basis<sp/>to<sp/>triangle<sp/>vertices&apos;<sp/>coordinates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>pointsForTriangle.clear();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>for(auto<sp/>i<sp/>=<sp/>allRemainingPoints.begin();<sp/>i<sp/>!=<sp/>allRemainingPoints.end();<sp/>){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>glm::vec3<sp/>point<sp/>=<sp/>{i-&gt;x(),<sp/>i-&gt;y(),<sp/>i-&gt;z()};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>if(pointInFirstQuadrantAfterTransformation(point<sp/>,<sp/>transformationMatrix)){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//std::cout<sp/>&lt;&lt;<sp/>&quot;(&quot;<sp/>&lt;&lt;<sp/>i-&gt;at(0)<sp/>&lt;&lt;<sp/>&quot;,<sp/>&quot;<sp/>&lt;&lt;<sp/>i-&gt;at(1)<sp/>&lt;&lt;<sp/>&quot;,<sp/>&quot;<sp/>&lt;&lt;<sp/>i-&gt;at(2)<sp/>&lt;&lt;<sp/>&quot;)&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointsForTriangle.push_back(*i);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>allRemainingPoints.erase(i);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>}else{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>subdivide(v3,<sp/>v31,<sp/>v23,<sp/>depth-1,<sp/>pointsForTriangle);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>transformationMatrix<sp/>=<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v12[0],<sp/>v12[1],<sp/>v12[2],<sp/><sp/><sp/><sp/><sp/>//<sp/>first<sp/>COLUMN!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v23[0],<sp/>v23[1],<sp/>v23[2],<sp/><sp/><sp/><sp/><sp/>//<sp/>second<sp/>COLUMN!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v31[0],<sp/>v31[1],<sp/>v31[2]<sp/><sp/><sp/><sp/><sp/>//<sp/>third<sp/>COLUMN!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>transformationMatrix<sp/>=<sp/>glm::inverse(transformationMatrix);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>transformation<sp/>matrix<sp/>inversed<sp/>in<sp/>order<sp/>to<sp/>change<sp/>basis<sp/>to<sp/>triangle<sp/>vertices&apos;<sp/>coordinates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>pointsForTriangle.clear();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>for(auto<sp/>i<sp/>=<sp/>allRemainingPoints.begin();<sp/>i<sp/>!=<sp/>allRemainingPoints.end();<sp/>){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glm::vec3<sp/>point<sp/>=<sp/>{i-&gt;x(),<sp/>i-&gt;y(),<sp/>i-&gt;z()};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(pointInFirstQuadrantAfterTransformation(point<sp/>,<sp/>transformationMatrix)){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//std::cout<sp/>&lt;&lt;<sp/>&quot;(&quot;<sp/>&lt;&lt;<sp/>i-&gt;at(0)<sp/>&lt;&lt;<sp/>&quot;,<sp/>&quot;<sp/>&lt;&lt;<sp/>i-&gt;at(1)<sp/>&lt;&lt;<sp/>&quot;,<sp/>&quot;<sp/>&lt;&lt;<sp/>i-&gt;at(2)<sp/>&lt;&lt;<sp/>&quot;)&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointsForTriangle.push_back(*i);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>allRemainingPoints.erase(i);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}else{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>subdivide(v12,<sp/>v23,<sp/>v31,<sp/>depth-1,<sp/>pointsForTriangle);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Icosphere::triangleColor(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>pointsInTriangle){</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>colorCode<sp/>=<sp/>int((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">(pointsInTriangle)/totalPoints)*256);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>glColor4f(RenderData::getInstance()-&gt;getColorMap[colorCode*3],</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RenderData::getInstance()-&gt;getColorMap[(colorCode*3)+1],</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RenderData::getInstance()-&gt;getColorMap[(colorCode*3)+2],<sp/>1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>for(std::map&lt;size_t,<sp/>glm::vec3&gt;::iterator<sp/>it<sp/>=<sp/>colorLookupMap.begin();<sp/>it<sp/>!=<sp/>colorLookupMap.end();<sp/>++it){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(std::next(it)<sp/>==<sp/>colorLookupMap.end()<sp/>||<sp/>(it-&gt;first<sp/>&lt;=<sp/>pointsInTriangle<sp/>&amp;&amp;<sp/>std::next(it)-&gt;first<sp/>&gt;<sp/>pointsInTriangle)){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glColor4f(it-&gt;second[0],<sp/>it-&gt;second[1],<sp/>it-&gt;second[2],<sp/>0.5);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal">}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Icosphere::pointInFirstQuadrantAfterTransformation(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>glm::vec3<sp/>&amp;point,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>glm::mat3<sp/>&amp;transformationMatrix){</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>glm::vec3<sp/>transformedPoint<sp/>=<sp/>transformationMatrix<sp/>*<sp/>point;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>point<sp/>in<sp/>coordinate<sp/>system<sp/>of<sp/>triangle<sp/>vertices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(transformedPoint[0]<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>transformedPoint[1]<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>transformedPoint[2]<sp/>&gt;=<sp/>0){</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal">}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal">glm::mat3<sp/>Icosphere::getTransformationMatrix(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>v1,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>v2,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>v3){</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>glm::mat3<sp/>transformationMatrix<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v1[0],<sp/>v1[1],<sp/>v1[2],<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>COLUMN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v2[0],<sp/>v2[1],<sp/>v2[2],<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>second<sp/>COLUMN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v3[0],<sp/>v3[1],<sp/>v3[2]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>third<sp/>COLUMN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>transformationMatrix<sp/>=<sp/>glm::inverse(transformationMatrix);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>transformation<sp/>matrix<sp/>inversed<sp/>in<sp/>order<sp/>to<sp/>change<sp/>basis<sp/>to<sp/>triangle<sp/>vertices&apos;<sp/>coordinates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>transformationMatrix;</highlight></codeline>
<codeline lineno="461"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="icosphere.cpp"/>
  </compounddef>
</doxygen>
